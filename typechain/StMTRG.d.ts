/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface StMTRGInterface extends ethers.utils.Interface {
  functions: {
    "CLOSE_DURATION()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "MTRG()": FunctionFragment;
    "allBuckets()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bucketIDToCandidate(bytes32)": FunctionFragment;
    "bucketValue(bytes32)": FunctionFragment;
    "candidateIndex(address)": FunctionFragment;
    "candidateToBucket(address)": FunctionFragment;
    "candidates()": FunctionFragment;
    "closeTerminal()": FunctionFragment;
    "closeTimestamp()": FunctionFragment;
    "currentIndex()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deleteBucket(address)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "epoch()": FunctionFragment;
    "executeClose()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "inTerminal()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "isClose()": FunctionFragment;
    "name()": FunctionFragment;
    "newCandidate(address)": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "rebase()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "requestClose()": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setBlackList(address)": FunctionFragment;
    "shareToValue(uint256)": FunctionFragment;
    "shares(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalShares()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferFund(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateCandidate(address,address)": FunctionFragment;
    "valueToShare(uint256)": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
    "withdrawAll(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CLOSE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MTRG", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allBuckets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bucketIDToCandidate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bucketValue",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "candidateIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "candidateToBucket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "candidates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeTerminal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteBucket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "epoch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeClose",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "inTerminal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "isClose", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newCandidate",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "rebase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestClose",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlackList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "shareToValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "shares", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFund",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateCandidate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "valueToShare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "withdrawAll", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "CLOSE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MTRG", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allBuckets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bucketIDToCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bucketValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "candidateIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "candidateToBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeTerminal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeClose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inTerminal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isClose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestClose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shareToValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueToShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Deposit(address,bytes32,uint256)": EventFragment;
    "ExecuteClost(address,bytes32,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LogRebase(bytes32,address,uint256,uint256)": EventFragment;
    "Merge(bytes32,bytes32,uint256)": EventFragment;
    "NewCandidate(address,bytes32)": EventFragment;
    "Paused(address)": EventFragment;
    "RequestClost(address,bytes32,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TerminalClost(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TransferFund(bytes32,bytes32,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UpdateCandidate(address,address)": EventFragment;
    "Withdraw(address,bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteClost"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRebase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Merge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCandidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestClost"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TerminalClost"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferFund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateCandidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class StMTRG extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: StMTRGInterface;

  functions: {
    CLOSE_DURATION(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "CLOSE_DURATION()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    MTRG(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "MTRG()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    allBuckets(overrides?: CallOverrides): Promise<{
      0: {
        bucketID: string;
        totalDeposit: BigNumber;
        locked: BigNumber;
        0: string;
        1: BigNumber;
        2: BigNumber;
      }[];
    }>;

    "allBuckets()"(overrides?: CallOverrides): Promise<{
      0: {
        bucketID: string;
        totalDeposit: BigNumber;
        locked: BigNumber;
        0: string;
        1: BigNumber;
        2: BigNumber;
      }[];
    }>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    bucketIDToCandidate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "bucketIDToCandidate(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    bucketValue(
      bucketID: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "bucketValue(bytes32)"(
      bucketID: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    candidateIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "candidateIndex(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    candidateToBucket(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      bucketID: string;
      totalDeposit: BigNumber;
      locked: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    "candidateToBucket(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      bucketID: string;
      totalDeposit: BigNumber;
      locked: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    candidates(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    "candidates()"(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    closeTerminal(overrides?: Overrides): Promise<ContractTransaction>;

    "closeTerminal()"(overrides?: Overrides): Promise<ContractTransaction>;

    closeTimestamp(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "closeTimestamp()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    currentIndex(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "currentIndex()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    decimals(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "decimals()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deleteBucket(
      candidate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deleteBucket(address)"(
      candidate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    epoch(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "epoch()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    executeClose(overrides?: Overrides): Promise<ContractTransaction>;

    "executeClose()"(overrides?: Overrides): Promise<ContractTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    inTerminal(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "inTerminal()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      admin: string,
      _MTRG: string,
      scriptEngineAddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address)"(
      admin: string,
      _MTRG: string,
      scriptEngineAddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isClose(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "isClose()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    newCandidate(
      candidate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "newCandidate(address)"(
      candidate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    nonces(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "nonces(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "paused()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rebase(overrides?: Overrides): Promise<ContractTransaction>;

    "rebase()"(overrides?: Overrides): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    requestClose(overrides?: Overrides): Promise<ContractTransaction>;

    "requestClose()"(overrides?: Overrides): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBlackList(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBlackList(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shareToValue(
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "shareToValue(uint256)"(
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    shares(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "shares(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    totalShares(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalShares()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFund(
      candidate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFund(address)"(
      candidate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides): Promise<ContractTransaction>;

    "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

    updateCandidate(
      oldCandidateAddr: string,
      newCandidateAddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateCandidate(address,address)"(
      oldCandidateAddr: string,
      newCandidateAddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    valueToShare(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "valueToShare(uint256)"(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    withdraw(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,address)"(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawAll(
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawAll(address)"(
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  CLOSE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  "CLOSE_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

  MTRG(overrides?: CallOverrides): Promise<string>;

  "MTRG()"(overrides?: CallOverrides): Promise<string>;

  allBuckets(
    overrides?: CallOverrides
  ): Promise<
    {
      bucketID: string;
      totalDeposit: BigNumber;
      locked: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }[]
  >;

  "allBuckets()"(
    overrides?: CallOverrides
  ): Promise<
    {
      bucketID: string;
      totalDeposit: BigNumber;
      locked: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }[]
  >;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bucketIDToCandidate(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "bucketIDToCandidate(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  bucketValue(
    bucketID: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "bucketValue(bytes32)"(
    bucketID: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  candidateIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "candidateIndex(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  candidateToBucket(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    bucketID: string;
    totalDeposit: BigNumber;
    locked: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
  }>;

  "candidateToBucket(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    bucketID: string;
    totalDeposit: BigNumber;
    locked: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
  }>;

  candidates(overrides?: CallOverrides): Promise<string[]>;

  "candidates()"(overrides?: CallOverrides): Promise<string[]>;

  closeTerminal(overrides?: Overrides): Promise<ContractTransaction>;

  "closeTerminal()"(overrides?: Overrides): Promise<ContractTransaction>;

  closeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "closeTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  currentIndex(overrides?: CallOverrides): Promise<BigNumber>;

  "currentIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deleteBucket(
    candidate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deleteBucket(address)"(
    candidate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  epoch(overrides?: CallOverrides): Promise<BigNumber>;

  "epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  executeClose(overrides?: Overrides): Promise<ContractTransaction>;

  "executeClose()"(overrides?: Overrides): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRoleMember(bytes32,uint256)"(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRoleMemberCount(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  inTerminal(overrides?: CallOverrides): Promise<boolean>;

  "inTerminal()"(overrides?: CallOverrides): Promise<boolean>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    admin: string,
    _MTRG: string,
    scriptEngineAddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address)"(
    admin: string,
    _MTRG: string,
    scriptEngineAddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isClose(overrides?: CallOverrides): Promise<boolean>;

  "isClose()"(overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  newCandidate(
    candidate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "newCandidate(address)"(
    candidate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "nonces(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rebase(overrides?: Overrides): Promise<ContractTransaction>;

  "rebase()"(overrides?: Overrides): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  requestClose(overrides?: Overrides): Promise<ContractTransaction>;

  "requestClose()"(overrides?: Overrides): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBlackList(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBlackList(address)"(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shareToValue(
    _share: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "shareToValue(uint256)"(
    _share: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  shares(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "shares(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFund(
    candidate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFund(address)"(
    candidate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides): Promise<ContractTransaction>;

  "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

  updateCandidate(
    oldCandidateAddr: string,
    newCandidateAddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateCandidate(address,address)"(
    oldCandidateAddr: string,
    newCandidateAddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  valueToShare(
    _value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "valueToShare(uint256)"(
    _value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,address)"(
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawAll(
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawAll(address)"(
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    CLOSE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    "CLOSE_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

    MTRG(overrides?: CallOverrides): Promise<string>;

    "MTRG()"(overrides?: CallOverrides): Promise<string>;

    allBuckets(
      overrides?: CallOverrides
    ): Promise<
      {
        bucketID: string;
        totalDeposit: BigNumber;
        locked: BigNumber;
        0: string;
        1: BigNumber;
        2: BigNumber;
      }[]
    >;

    "allBuckets()"(
      overrides?: CallOverrides
    ): Promise<
      {
        bucketID: string;
        totalDeposit: BigNumber;
        locked: BigNumber;
        0: string;
        1: BigNumber;
        2: BigNumber;
      }[]
    >;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bucketIDToCandidate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "bucketIDToCandidate(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    bucketValue(
      bucketID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bucketValue(bytes32)"(
      bucketID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    candidateIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "candidateIndex(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    candidateToBucket(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      bucketID: string;
      totalDeposit: BigNumber;
      locked: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    "candidateToBucket(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      bucketID: string;
      totalDeposit: BigNumber;
      locked: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    candidates(overrides?: CallOverrides): Promise<string[]>;

    "candidates()"(overrides?: CallOverrides): Promise<string[]>;

    closeTerminal(overrides?: CallOverrides): Promise<void>;

    "closeTerminal()"(overrides?: CallOverrides): Promise<void>;

    closeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "closeTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "currentIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deleteBucket(candidate: string, overrides?: CallOverrides): Promise<void>;

    "deleteBucket(address)"(
      candidate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    "epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    executeClose(overrides?: CallOverrides): Promise<void>;

    "executeClose()"(overrides?: CallOverrides): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    inTerminal(overrides?: CallOverrides): Promise<boolean>;

    "inTerminal()"(overrides?: CallOverrides): Promise<boolean>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      admin: string,
      _MTRG: string,
      scriptEngineAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address)"(
      admin: string,
      _MTRG: string,
      scriptEngineAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isClose(overrides?: CallOverrides): Promise<boolean>;

    "isClose()"(overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    newCandidate(candidate: string, overrides?: CallOverrides): Promise<void>;

    "newCandidate(address)"(
      candidate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    rebase(overrides?: CallOverrides): Promise<void>;

    "rebase()"(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestClose(overrides?: CallOverrides): Promise<void>;

    "requestClose()"(overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBlackList(account: string, overrides?: CallOverrides): Promise<void>;

    "setBlackList(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    shareToValue(
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "shareToValue(uint256)"(
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shares(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "shares(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFund(candidate: string, overrides?: CallOverrides): Promise<void>;

    "transferFund(address)"(
      candidate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;

    updateCandidate(
      oldCandidateAddr: string,
      newCandidateAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateCandidate(address,address)"(
      oldCandidateAddr: string,
      newCandidateAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    valueToShare(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "valueToShare(uint256)"(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,address)"(
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(recipient: string, overrides?: CallOverrides): Promise<void>;

    "withdrawAll(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    Deposit(
      account: string | null,
      bucketID: BytesLike | null,
      amount: null
    ): EventFilter;

    ExecuteClost(
      candidate: string | null,
      bucketID: null,
      timestamp: null
    ): EventFilter;

    Initialized(version: null): EventFilter;

    LogRebase(
      bucketID: BytesLike | null,
      candidate: string | null,
      epoch: BigNumberish | null,
      totalSupply: null
    ): EventFilter;

    Merge(
      oldBucketID: BytesLike | null,
      newBucketID: BytesLike | null,
      amount: null
    ): EventFilter;

    NewCandidate(candidate: string | null, bucketID: null): EventFilter;

    Paused(account: null): EventFilter;

    RequestClost(
      candidate: string | null,
      bucketID: null,
      timestamp: null
    ): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    TerminalClost(timestamp: null): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;

    TransferFund(
      oldBucketID: BytesLike | null,
      newBucketID: BytesLike | null,
      amount: null
    ): EventFilter;

    Unpaused(account: null): EventFilter;

    UpdateCandidate(
      oldCandidate: string | null,
      newCandidate: null
    ): EventFilter;

    Withdraw(
      account: string | null,
      bucketID: BytesLike | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    CLOSE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    "CLOSE_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    MTRG(overrides?: CallOverrides): Promise<BigNumber>;

    "MTRG()"(overrides?: CallOverrides): Promise<BigNumber>;

    allBuckets(overrides?: CallOverrides): Promise<BigNumber>;

    "allBuckets()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bucketIDToCandidate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bucketIDToCandidate(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bucketValue(
      bucketID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bucketValue(bytes32)"(
      bucketID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    candidateIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "candidateIndex(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    candidateToBucket(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "candidateToBucket(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    candidates(overrides?: CallOverrides): Promise<BigNumber>;

    "candidates()"(overrides?: CallOverrides): Promise<BigNumber>;

    closeTerminal(overrides?: Overrides): Promise<BigNumber>;

    "closeTerminal()"(overrides?: Overrides): Promise<BigNumber>;

    closeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "closeTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "currentIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deleteBucket(candidate: string, overrides?: Overrides): Promise<BigNumber>;

    "deleteBucket(address)"(
      candidate: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    "epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    executeClose(overrides?: Overrides): Promise<BigNumber>;

    "executeClose()"(overrides?: Overrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inTerminal(overrides?: CallOverrides): Promise<BigNumber>;

    "inTerminal()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      admin: string,
      _MTRG: string,
      scriptEngineAddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address)"(
      admin: string,
      _MTRG: string,
      scriptEngineAddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isClose(overrides?: CallOverrides): Promise<BigNumber>;

    "isClose()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    newCandidate(candidate: string, overrides?: Overrides): Promise<BigNumber>;

    "newCandidate(address)"(
      candidate: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    "pause()"(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rebase(overrides?: Overrides): Promise<BigNumber>;

    "rebase()"(overrides?: Overrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    requestClose(overrides?: Overrides): Promise<BigNumber>;

    "requestClose()"(overrides?: Overrides): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBlackList(account: string, overrides?: Overrides): Promise<BigNumber>;

    "setBlackList(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    shareToValue(
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "shareToValue(uint256)"(
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shares(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "shares(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFund(candidate: string, overrides?: Overrides): Promise<BigNumber>;

    "transferFund(address)"(
      candidate: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides): Promise<BigNumber>;

    "unpause()"(overrides?: Overrides): Promise<BigNumber>;

    updateCandidate(
      oldCandidateAddr: string,
      newCandidateAddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateCandidate(address,address)"(
      oldCandidateAddr: string,
      newCandidateAddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    valueToShare(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "valueToShare(uint256)"(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,address)"(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawAll(recipient: string, overrides?: Overrides): Promise<BigNumber>;

    "withdrawAll(address)"(
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CLOSE_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CLOSE_DURATION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MTRG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MTRG()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allBuckets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "allBuckets()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bucketIDToCandidate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bucketIDToCandidate(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bucketValue(
      bucketID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bucketValue(bytes32)"(
      bucketID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    candidateIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "candidateIndex(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    candidateToBucket(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "candidateToBucket(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    candidates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "candidates()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closeTerminal(overrides?: Overrides): Promise<PopulatedTransaction>;

    "closeTerminal()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    closeTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "closeTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentIndex()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deleteBucket(
      candidate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deleteBucket(address)"(
      candidate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "epoch()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeClose(overrides?: Overrides): Promise<PopulatedTransaction>;

    "executeClose()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inTerminal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "inTerminal()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      admin: string,
      _MTRG: string,
      scriptEngineAddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address)"(
      admin: string,
      _MTRG: string,
      scriptEngineAddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isClose(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isClose()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newCandidate(
      candidate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "newCandidate(address)"(
      candidate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    nonces(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rebase(overrides?: Overrides): Promise<PopulatedTransaction>;

    "rebase()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    requestClose(overrides?: Overrides): Promise<PopulatedTransaction>;

    "requestClose()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBlackList(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBlackList(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shareToValue(
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "shareToValue(uint256)"(
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shares(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "shares(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalShares()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFund(
      candidate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFund(address)"(
      candidate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unpause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    updateCandidate(
      oldCandidateAddr: string,
      newCandidateAddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateCandidate(address,address)"(
      oldCandidateAddr: string,
      newCandidateAddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    valueToShare(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "valueToShare(uint256)"(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,address)"(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawAll(address)"(
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
